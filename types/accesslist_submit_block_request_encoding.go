// Code generated by fastssz. DO NOT EDIT.
// Hash: d767fe604bd11887fc7b6df45a6fb8fc17e5e58f18994012e742c68813426a72
// Version: 0.1.3
package types

import (
	d "github.com/attestantio/go-builder-client/api/deneb"
	v1 "github.com/attestantio/go-builder-client/api/v1"
	deneb "github.com/attestantio/go-eth2-client/spec/deneb"
	electra "github.com/attestantio/go-eth2-client/spec/electra"
	phase0 "github.com/attestantio/go-eth2-client/spec/phase0"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the AccesslistData object
func (a *AccesslistData) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the AccesslistData object to a target array
func (a *AccesslistData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'Addresses'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(a.Addresses) * 20

	// Field (0) 'Addresses'
	if size := len(a.Addresses); size > 4096 {
		err = ssz.ErrListTooBigFn("AccesslistData.Addresses", size, 4096)
		return
	}
	for ii := 0; ii < len(a.Addresses); ii++ {
		dst = append(dst, a.Addresses[ii][:]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the AccesslistData object
func (a *AccesslistData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Addresses'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'Addresses'
	{
		buf = tail[o0:]
		num, err := ssz.DivideInt2(len(buf), 20, 4096)
		if err != nil {
			return err
		}
		a.Addresses = make([][20]byte, num)
		for ii := 0; ii < num; ii++ {
			copy(a.Addresses[ii][:], buf[ii*20:(ii+1)*20])
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the AccesslistData object
func (a *AccesslistData) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'Addresses'
	size += len(a.Addresses) * 20

	return
}

// HashTreeRoot ssz hashes the AccesslistData object
func (a *AccesslistData) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the AccesslistData object with a hasher
func (a *AccesslistData) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Addresses'
	{
		if size := len(a.Addresses); size > 4096 {
			err = ssz.ErrListTooBigFn("AccesslistData.Addresses", size, 4096)
			return
		}
		subIndx := hh.Index()
		for _, i := range a.Addresses {
			hh.PutBytes(i[:])
		}
		numItems := uint64(len(a.Addresses))
		hh.MerkleizeWithMixin(subIndx, numItems, 4096)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the AccesslistData object
func (a *AccesslistData) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(a)
}

// MarshalSSZ ssz marshals the AccesslistSubmitBlockRequest object
func (a *AccesslistSubmitBlockRequest) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the AccesslistSubmitBlockRequest object to a target array
func (a *AccesslistSubmitBlockRequest) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(348)

	// Field (0) 'Message'
	if a.Message == nil {
		a.Message = new(v1.BidTrace)
	}
	if dst, err = a.Message.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (1) 'ExecutionPayload'
	dst = ssz.WriteOffset(dst, offset)
	if a.ExecutionPayload == nil {
		a.ExecutionPayload = new(deneb.ExecutionPayload)
	}
	offset += a.ExecutionPayload.SizeSSZ()

	// Offset (2) 'BlobsBundle'
	dst = ssz.WriteOffset(dst, offset)
	if a.BlobsBundle == nil {
		a.BlobsBundle = new(d.BlobsBundle)
	}
	offset += a.BlobsBundle.SizeSSZ()

	// Offset (3) 'ExecutionRequests'
	dst = ssz.WriteOffset(dst, offset)
	if a.ExecutionRequests == nil {
		a.ExecutionRequests = new(electra.ExecutionRequests)
	}
	offset += a.ExecutionRequests.SizeSSZ()

	// Field (4) 'Signature'
	dst = append(dst, a.Signature[:]...)

	// Offset (5) 'AccesslistData'
	dst = ssz.WriteOffset(dst, offset)
	offset += a.AccesslistData.SizeSSZ()

	// Field (1) 'ExecutionPayload'
	if dst, err = a.ExecutionPayload.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'BlobsBundle'
	if dst, err = a.BlobsBundle.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'ExecutionRequests'
	if dst, err = a.ExecutionRequests.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (5) 'AccesslistData'
	if dst, err = a.AccesslistData.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the AccesslistSubmitBlockRequest object
func (a *AccesslistSubmitBlockRequest) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 348 {
		return ssz.ErrSize
	}

	tail := buf
	var o1, o2, o3, o5 uint64

	// Field (0) 'Message'
	if a.Message == nil {
		a.Message = new(v1.BidTrace)
	}
	if err = a.Message.UnmarshalSSZ(buf[0:236]); err != nil {
		return err
	}

	// Offset (1) 'ExecutionPayload'
	if o1 = ssz.ReadOffset(buf[236:240]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 348 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (2) 'BlobsBundle'
	if o2 = ssz.ReadOffset(buf[240:244]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'ExecutionRequests'
	if o3 = ssz.ReadOffset(buf[244:248]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Field (4) 'Signature'
	copy(a.Signature[:], buf[248:344])

	// Offset (5) 'AccesslistData'
	if o5 = ssz.ReadOffset(buf[344:348]); o5 > size || o3 > o5 {
		return ssz.ErrOffset
	}

	// Field (1) 'ExecutionPayload'
	{
		buf = tail[o1:o2]
		if a.ExecutionPayload == nil {
			a.ExecutionPayload = new(deneb.ExecutionPayload)
		}
		if err = a.ExecutionPayload.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (2) 'BlobsBundle'
	{
		buf = tail[o2:o3]
		if a.BlobsBundle == nil {
			a.BlobsBundle = new(d.BlobsBundle)
		}
		if err = a.BlobsBundle.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (3) 'ExecutionRequests'
	{
		buf = tail[o3:o5]
		if a.ExecutionRequests == nil {
			a.ExecutionRequests = new(electra.ExecutionRequests)
		}
		if err = a.ExecutionRequests.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (5) 'AccesslistData'
	{
		buf = tail[o5:]
		if err = a.AccesslistData.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the AccesslistSubmitBlockRequest object
func (a *AccesslistSubmitBlockRequest) SizeSSZ() (size int) {
	size = 348

	// Field (1) 'ExecutionPayload'
	if a.ExecutionPayload == nil {
		a.ExecutionPayload = new(deneb.ExecutionPayload)
	}
	size += a.ExecutionPayload.SizeSSZ()

	// Field (2) 'BlobsBundle'
	if a.BlobsBundle == nil {
		a.BlobsBundle = new(d.BlobsBundle)
	}
	size += a.BlobsBundle.SizeSSZ()

	// Field (3) 'ExecutionRequests'
	if a.ExecutionRequests == nil {
		a.ExecutionRequests = new(electra.ExecutionRequests)
	}
	size += a.ExecutionRequests.SizeSSZ()

	// Field (5) 'AccesslistData'
	size += a.AccesslistData.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the AccesslistSubmitBlockRequest object
func (a *AccesslistSubmitBlockRequest) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the AccesslistSubmitBlockRequest object with a hasher
func (a *AccesslistSubmitBlockRequest) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Message'
	if a.Message == nil {
		a.Message = new(v1.BidTrace)
	}
	if err = a.Message.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'ExecutionPayload'
	if err = a.ExecutionPayload.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'BlobsBundle'
	if err = a.BlobsBundle.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (3) 'ExecutionRequests'
	if err = a.ExecutionRequests.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (4) 'Signature'
	hh.PutBytes(a.Signature[:])

	// Field (5) 'AccesslistData'
	if err = a.AccesslistData.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the AccesslistSubmitBlockRequest object
func (a *AccesslistSubmitBlockRequest) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(a)
}
